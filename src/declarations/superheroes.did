type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type SubAccount = vec nat8;
type Result_6 = 
 variant {
   err: text;
   ok: TokenIndex;
 };
type Result_5 = 
 variant {
   err: CommonError;
   ok: vec Metadata;
 };
type Result_4 = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result_3 = 
 variant {
   err: CommonError;
   ok: nat;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: vec record {
             AccountIdentifier__1;
             Balance__1;
           };
 };
type Result_1 = 
 variant {
   err: text;
   ok: bool;
 };
type Result = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Metadata = 
 record {
   description: text;
   image: text;
   name: text;
 };
type Memo = blob;
type Extension = text;
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type AntKingdoms = 
 service {
   acceptCycles: () -> ();
   allMetadata: () ->
    (vec record {
           TokenIndex;
           record {
             Metadata;
             Balance__1;
           };
         }) query;
   allRegistry: () ->
    (vec record {
           TokenIndex;
           vec record {
                 AccountIdentifier__1;
                 Balance__1;
               };
         }) query;
   availableCycles: () -> (nat) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   changeAdmin: (principal) -> ();
   claiming: () -> (Result_6);
   extensions: () -> (vec Extension) query;
   getTokensMetadata: () -> (vec Metadata);
   getUserTokens: (AccountIdentifier__1) -> (Result_5) query;
   metadata: (TokenIdentifier__1) -> (Result_4) query;
   numberOfTokenHolders: (TokenIdentifier__1) -> (Result_3) query;
   numberOfTokens: () -> (nat) query;
   registry: (TokenIdentifier__1) -> (Result_2) query;
   setTokensMetadata: (vec Metadata) -> (Result_1);
   supply: (TokenIdentifier__1) -> (Result) query;
   transfer: (TransferRequest) -> (TransferResponse);
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : (principal) -> AntKingdoms
