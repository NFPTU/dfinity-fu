type WorkerFarmRequest = 
 record {
   countIds: nat;
   food: vec TokenIndex;
   gold: vec TokenIndex;
   leaf: vec TokenIndex;
   soil: vec TokenIndex;
 };
type UserState = 
 record {
   currentAnt: nat;
   kingdomId: TokenIndex;
   limitAnt: nat;
   resource: Resource;
 };
type UserInfoExt = 
 record {
   id: text;
   name: text;
   tokens: vec TokenIndex;
   userState: UserState;
 };
type User = 
 variant {
   address: AccountIdentifier__1;
   "principal": principal;
 };
type TokenIndex__1 = nat32;
type TokenIndex = nat32;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Time = int;
type Result_9 = 
 variant {
   err: CommonError;
   ok: vec OrderExt;
 };
type Result_8 = 
 variant {
   err: CommonError;
   ok: vec MetadataExt;
 };
type Result_7 = 
 variant {
   err: CommonError;
   ok: MetadataExt;
 };
type Result_6 = 
 variant {
   err: CommonError;
   ok: vec record {
             AccountIdentifier;
             Balance;
           };
 };
type Result_5 = 
 variant {
   err: text;
   ok: vec LevelData;
 };
type Result_4 = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type Result_3 = 
 variant {
   err: text;
   ok: text;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: nat;
 };
type Result_12 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_11 = 
 variant {
   err: text;
   ok: vec OrderExt;
 };
type Result_10 = 
 variant {
   err: text;
   ok: vec MetadataExt;
 };
type Result_1 = 
 variant {
   err: text;
   ok: MetadataExt;
 };
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type Resource = 
 record {
   food: float64;
   gold: float64;
   leaf: float64;
   soil: float64;
 };
type OrderExt = 
 record {
   index: nat;
   owner: principal;
   price: nat;
   token: MetadataExt__1;
 };
type MetadataExt__1 = 
 record {
   attributes: vec AttributeMeta;
   description: text;
   detail: DetailNFT;
   image: text;
   name: text;
   tokenId: opt TokenIndex;
 };
type MetadataExt = 
 record {
   attributes: vec AttributeMeta;
   description: text;
   detail: DetailNFT;
   image: text;
   name: text;
   tokenId: opt TokenIndex;
 };
type LevelData = 
 record {
   info: vec InfoLevel;
   name: text;
 };
type InfoLevel = 
 record {
   info: vec CostInfo;
   rarity: text;
 };
type Extension = text;
type DetailNFT = 
 variant {
   army: record {
           antState: nat;
           kingdomId: TokenIndex;
           queenId: TokenIndex;
         };
   kingdom: record {landId: vec TokenIndex;};
   land:
    record {
      claimableResource: vec ClaimResouceInfo;
      inKingdom: TokenIndex;
      info: record {farmingTime: Time;};
      nestStaked: opt TokenIndex;
      resource: Resource;
    };
   nest:
    record {
      inLand: opt TokenIndex;
      level: nat;
      limit: nat;
      queenIn: opt TokenIndex;
    };
   queen:
    record {
      breedingWorkerId: TokenIndex;
      inNest: opt TokenIndex;
      info: record {
              breedWorkerTime: Time;
              resourcePerWorker: Resource;
            };
      level: nat;
    };
   worker:
    record {
      antState: nat;
      breedTimestamp: Time;
      farmTimestamp: Time;
      inNest: opt TokenIndex;
      info: record {
              farmPerTime: Resource;
              farmingTime: Time;
            };
      queenId: opt TokenIndex;
    };
 };
type CostInfo = 
 record {
   costResource: Resource;
   level: nat;
   nextLevel:
    variant {
      nest: record {limit: nat;};
      queen: record {
               breedWorkerTime: Time;
               resourcePerWorker: Resource;
             };
      worker: record {farmPerTime: Resource;};
    };
 };
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type ClaimResouceInfo = 
 record {
   claimTimeStamp: Time;
   id: TokenIndex;
   resource: Resource;
   workersFarmIds: vec TokenIndex;
 };
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance__1;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type AttributeMeta = 
 record {
   max: opt text;
   min: opt text;
   trait_type: text;
   value: text;
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : {
  acceptCycles: () -> ();
  allRegistry: () ->
   (vec record {
          TokenIndex__1;
          vec record {
                AccountIdentifier;
                Balance;
              };
        }) query;
  availableCycles: () -> (nat) query;
  balance: (BalanceRequest) -> (BalanceResponse) query;
  breedAntArmy: (TokenIndex__1) -> (Result);
  breedAntWorkder: (TokenIndex__1) -> (Result);
  buy: (nat) -> (Result_12);
  cancelOrder: (nat) -> (Result_12);
  changeAdmin: (principal) -> ();
  claimResourceInLand: (TokenIndex__1, TokenIndex__1) -> (Result);
  claimWorkerEgg: (TokenIndex__1) -> (Result);
  claiming: () -> (Result);
  createOrder: (TokenIndex__1, nat) -> (Result_12);
  extensions: () -> (vec Extension) query;
  getAllOrders: () -> (Result_11) query;
  getDataByLandId: (TokenIndex__1) -> (Result_10);
  getTokensMetadata: () -> (vec MetadataExt);
  getUserAvailableWorker: (AccountIdentifier) -> (Result_8) query;
  getUserInfo: (AccountIdentifier) -> (UserInfoExt) query;
  getUserOrders: (AccountIdentifier) -> (Result_9) query;
  getUserTokens: (AccountIdentifier) -> (Result_8) query;
  metadata: (TokenIdentifier__1) -> (Result_7) query;
  numberOfTokenHolders: (TokenIdentifier__1) -> (Result_2) query;
  numberOfTokens: () -> (nat) query;
  registry: (TokenIdentifier__1) -> (Result_6) query;
  setLevelMetadata: (vec LevelData) -> (Result_5);
  setTokensMetadata: (vec MetadataExt) -> (Result);
  stakeLandToKingdom: (TokenIndex__1, TokenIndex__1) -> (Result);
  stakeNestInLand: (TokenIndex__1, TokenIndex__1) -> (Result_3);
  stakeQueenInNest: (TokenIndex__1, TokenIndex__1) -> (Result_3);
  supply: (TokenIdentifier__1) -> (Result_4) query;
  swapGoldToToken: (nat) -> (Result);
  transfer: (principal, TokenIndex__1) -> (Result);
  unStakeLandToKingdom: (TokenIndex__1, TokenIndex__1) -> (Result);
  unStakeNestInLand: (TokenIndex__1, TokenIndex__1) -> (Result_3);
  unStakeQueenInNest: (TokenIndex__1, TokenIndex__1) -> (Result_3);
  updateUser: (text) -> (Result_2);
  upgradeLevelNest: (TokenIndex__1) -> (Result_1);
  upgradeLevelQueen: (TokenIndex__1) -> (Result_1);
  workerFarmInLand: (WorkerFarmRequest, TokenIndex__1) -> (Result);
}
