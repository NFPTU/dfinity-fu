type WorkerFarmRequest = 
 record {
   countIds: nat;
   food: vec TokenIndex;
   gold: vec TokenIndex;
   leaf: vec TokenIndex;
   soil: vec TokenIndex;
 };
type UserState = record {resource: Resource;};
type UserInfoExt = 
 record {
   id: text;
   name: text;
   tokens: vec TokenIndex;
   userState: UserState;
 };
type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex__1 = nat32;
type TokenIndex = nat32;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Time = int;
type SubAccount = vec nat8;
type Result_7 = 
 variant {
   err: text;
   ok: vec MetadataExt;
 };
type Result_6 = 
 variant {
   err: CommonError;
   ok: vec MetadataExt;
 };
type Result_5 = 
 variant {
   err: CommonError;
   ok: MetadataExt;
 };
type Result_4 = 
 variant {
   err: CommonError;
   ok: vec record {
             AccountIdentifier__1;
             Balance__1;
           };
 };
type Result_3 = 
 variant {
   err: text;
   ok: text;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type Resource = 
 record {
   food: float64;
   gold: float64;
   leaf: float64;
   soil: float64;
 };
type MetadataExt = 
 record {
   attributes: vec AttributeMeta;
   description: text;
   detail: DetailNFT;
   image: text;
   name: text;
   tokenId: opt TokenIndex;
 };
type Memo = blob;
type Extension = text;
type DetailNFT = 
 variant {
   land:
    record {
      claimableResource: vec ClaimResouceInfo;
      nestStaked: opt TokenIndex;
      resource: Resource;
      workersFarmIds: vec TokenIndex;
    };
   nest: record {
           inLand: opt TokenIndex;
           level: nat;
           queenIn: opt TokenIndex;
         };
   queen:
    record {
      inNest: opt TokenIndex;
      info: record {
              breedWorkerTime: Time;
              foodPerWorker: float64;
            };
      level: nat;
    };
   worker:
    record {
      antState: nat;
      breedTimestamp: Time;
      farmTimestamp: Time;
      inNest: opt TokenIndex;
      info: record {
              farmPerTime: Resource;
              farmingTime: Time;
            };
      level: nat;
      queenId: opt TokenIndex;
    };
 };
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type ClaimResouceInfo = 
 record {
   claimTimeStamp: Time;
   id: TokenIndex;
   resource: Resource;
 };
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type AttributeMeta = 
 record {
   max: opt text;
   min: opt text;
   trait_type: text;
   value: text;
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : {
  acceptCycles: () -> ();
  allRegistry: () ->
   (vec record {
          TokenIndex__1;
          vec record {
                AccountIdentifier__1;
                Balance__1;
              };
        }) query;
  availableCycles: () -> (nat) query;
  balance: (BalanceRequest) -> (BalanceResponse) query;
  breedAntWorkder: (TokenIndex__1) -> (Result);
  changeAdmin: (principal) -> ();
  claimResourceInLand: (TokenIndex__1, TokenIndex__1) -> (Result);
  claimWorkerEgg: (TokenIndex__1) -> (Result);
  claiming: () -> (Result);
  extensions: () -> (vec Extension) query;
  getDataByLandId: (TokenIndex__1) -> (Result_7);
  getTokensMetadata: () -> (vec MetadataExt);
  getUserAvailableWorker: (AccountIdentifier__1) -> (Result_6) query;
  getUserInfo: (AccountIdentifier__1) -> (UserInfoExt) query;
  getUserTokens: (AccountIdentifier__1) -> (Result_6) query;
  metadata: (TokenIdentifier__1) -> (Result_5) query;
  numberOfTokenHolders: (TokenIdentifier__1) -> (Result_1) query;
  numberOfTokens: () -> (nat) query;
  registry: (TokenIdentifier__1) -> (Result_4) query;
  setTokensMetadata: (vec MetadataExt) -> (Result);
  stakeNestInLand: (TokenIndex__1, TokenIndex__1) -> (Result_3);
  stakeQueenInNest: (TokenIndex__1, TokenIndex__1) -> (Result_3);
  supply: (TokenIdentifier__1) -> (Result_2) query;
  transfer: (TransferRequest) -> (TransferResponse);
  updateUser: (text) -> (Result_1);
  workerFarmInLand: (WorkerFarmRequest, TokenIndex__1) -> (Result);
}
